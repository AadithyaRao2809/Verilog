$date
	Thu Dec 01 14:07:05 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module adder4Test $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % cin $end
$scope module a1 $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$scope module f1 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + sum1 $end
$var wire 1 , sum $end
$var wire 1 - carry2 $end
$var wire 1 . carry1 $end
$var wire 1 / carry $end
$var wire 1 0 cIn $end
$scope module a1 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + s $end
$var wire 1 . c $end
$scope module carry1 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 . y $end
$upscope $end
$scope module sum1 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + y $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 + a $end
$var wire 1 , s $end
$var wire 1 - c $end
$var wire 1 0 b $end
$scope module carry1 $end
$var wire 1 + a $end
$var wire 1 - y $end
$var wire 1 0 b $end
$upscope $end
$scope module sum1 $end
$var wire 1 + a $end
$var wire 1 , y $end
$var wire 1 0 b $end
$upscope $end
$upscope $end
$scope module suma1a2 $end
$var wire 1 . a $end
$var wire 1 - b $end
$var wire 1 / y $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 / cIn $end
$var wire 1 3 sum1 $end
$var wire 1 4 sum $end
$var wire 1 5 carry2 $end
$var wire 1 6 carry1 $end
$var wire 1 7 carry $end
$scope module a1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 s $end
$var wire 1 6 c $end
$scope module carry1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 6 y $end
$upscope $end
$scope module sum1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 y $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 3 a $end
$var wire 1 / b $end
$var wire 1 4 s $end
$var wire 1 5 c $end
$scope module carry1 $end
$var wire 1 3 a $end
$var wire 1 / b $end
$var wire 1 5 y $end
$upscope $end
$scope module sum1 $end
$var wire 1 3 a $end
$var wire 1 / b $end
$var wire 1 4 y $end
$upscope $end
$upscope $end
$scope module suma1a2 $end
$var wire 1 6 a $end
$var wire 1 5 b $end
$var wire 1 7 y $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 7 cIn $end
$var wire 1 : sum1 $end
$var wire 1 ; sum $end
$var wire 1 < carry2 $end
$var wire 1 = carry1 $end
$var wire 1 " carry $end
$scope module a1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : s $end
$var wire 1 = c $end
$scope module carry1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 = y $end
$upscope $end
$scope module sum1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : y $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 : a $end
$var wire 1 7 b $end
$var wire 1 ; s $end
$var wire 1 < c $end
$scope module carry1 $end
$var wire 1 : a $end
$var wire 1 7 b $end
$var wire 1 < y $end
$upscope $end
$scope module sum1 $end
$var wire 1 : a $end
$var wire 1 7 b $end
$var wire 1 ; y $end
$upscope $end
$upscope $end
$scope module suma1a2 $end
$var wire 1 = a $end
$var wire 1 < b $end
$var wire 1 " y $end
$upscope $end
$upscope $end
$scope module h0 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 % cIn $end
$var wire 1 @ sum1 $end
$var wire 1 A sum $end
$var wire 1 B carry2 $end
$var wire 1 C carry1 $end
$var wire 1 0 carry $end
$scope module a1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 @ s $end
$var wire 1 C c $end
$scope module carry1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 C y $end
$upscope $end
$scope module sum1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 @ y $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 @ a $end
$var wire 1 % b $end
$var wire 1 A s $end
$var wire 1 B c $end
$scope module carry1 $end
$var wire 1 @ a $end
$var wire 1 % b $end
$var wire 1 B y $end
$upscope $end
$scope module sum1 $end
$var wire 1 @ a $end
$var wire 1 % b $end
$var wire 1 A y $end
$upscope $end
$upscope $end
$scope module suma1a2 $end
$var wire 1 C a $end
$var wire 1 B b $end
$var wire 1 0 y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adderTest $end
$var wire 1 D sum $end
$var wire 1 E cout $end
$var reg 1 F A $end
$var reg 1 G B $end
$var reg 1 H cin $end
$scope module a1 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H cIn $end
$var wire 1 I sum1 $end
$var wire 1 D sum $end
$var wire 1 J carry2 $end
$var wire 1 K carry1 $end
$var wire 1 E carry $end
$scope module a1 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 I s $end
$var wire 1 K c $end
$scope module carry1 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 K y $end
$upscope $end
$scope module sum1 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 I y $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 1 I a $end
$var wire 1 H b $end
$var wire 1 D s $end
$var wire 1 J c $end
$scope module carry1 $end
$var wire 1 I a $end
$var wire 1 H b $end
$var wire 1 J y $end
$upscope $end
$scope module sum1 $end
$var wire 1 I a $end
$var wire 1 H b $end
$var wire 1 D y $end
$upscope $end
$upscope $end
$scope module suma1a2 $end
$var wire 1 K a $end
$var wire 1 J b $end
$var wire 1 E y $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0K
0J
0I
0H
0G
0F
0E
0D
1C
0B
0A
0@
1?
1>
0=
0<
1;
1:
19
08
07
06
05
14
13
02
11
10
0/
0.
0-
1,
0+
0*
0)
b1110 (
b1001 '
b101 &
0%
b1001 $
b101 #
0"
b1110 !
$end
#10
0"
0<
1;
07
05
14
0/
00
1A
0-
b1111 !
b1111 (
1,
1D
0C
1@
1+
1I
0>
1)
1G
b110 #
b110 &
#20
1"
1<
0;
17
15
04
1/
0,
1-
10
b0 !
b0 (
0A
1C
0@
09
1>
18
0G
1F
b1 $
b1 '
b1111 #
b1111 &
#30
1E
0D
1K
0I
1G
#40
0E
1D
0K
1H
0G
0F
#50
1E
1J
0D
1I
1G
#60
0G
1F
#70
0J
1D
1K
0I
1G
#80
